syntax = "proto3";

package algotrader.model;


message Underlying {

    message Asset {
        string inst_id = 1;
        double weight = 2;
    }

    enum UnderlyingType {
        Single = 0;
        FixedWeightBasket = 1;
        WorstOfBasket = 2;
        BestOfBasket = 3;
    }

    UnderlyingType type = 1;
    repeated Asset assets = 2;

}

message Instrument {
    // zero value in enum is not converted in serialization
    // see https://stackoverflow.com/questions/42987265/protobuf-messagetojson-removes-fields-with-value-0/43148916
    // or https://github.com/golang/protobuf/issues/258
    // that means all STK type Instrument will not have type key in database ( Mongo) which is not good for database query.
    // so the workaround is to offset the STK to 1, but protobuf always has to start from zero, so we add a default dummy as workaround
    enum InstType {
        DEFAULTINST = 0;
        STK = 1;
        FUT = 2;
        OPT = 3;
        FOT = 4;
        IDX = 5;
        CASH = 6;
        ETF = 7;
        CBO = 8;
    }

    enum OptionType {
        DEFAULTOPT = 0;
        Call = 1;
        Put = 2;
    }

    enum OptionStyle {
        DEFAULTSTYLE = 0;
        European = 1;
        American = 2;
    }

    //int64 inst_id = 1; // unique, generated by system
    string inst_id = 2; // uniqie symbol + '@' + primary_exch_id
    string symbol = 3;
    string name = 4;
    InstType type = 5;
    string primary_exch_id = 6;
    repeated string exch_ids = 7;
    string ccy_id = 8;
    string sector = 9;
    string industry = 10;
    double margin = 11;
    double tick_size = 12;

    //alt sym / ids
    map<string, string> alt_symbols = 31; //map<provider_id, alt_symbol>, e.g. IB -> 5
    map<string, string> alt_ids = 32; //e.g. RIC -> 0005.HK
    map<string, string> alt_sectors = 33;
    map<string, string> alt_industries = 34;

    //derivatives
    Underlying underlying = 101;
    OptionType option_type = 102;
    OptionStyle option_style = 103;
    double strike = 104;
    int64 exp_date = 105;
    double multiplier = 106;

}

message Exchange {
    string exch_id = 1; //uniqie
    string name = 2;
    string country_id = 3;
    string trading_hours_id = 4;
    string holidays_id = 5;

    map<string, string> alt_ids = 6;
}

message Country {
    string country_id = 1; //uniqie
    string name = 2;

    string holidays_id = 3;
}

message Currency {
    string ccy_id = 1; //uniqie
    string name = 2;
}

message HolidaySeries {
    message Holiday {
        int64 trading_date = 1;
        int64 start_date = 2;
        int64 start_time = 3;
        int64 end_date = 4;
        int64 end_time = 5;
        Type type = 6;
        string desc = 7;

        enum Type {
            FullDay = 0;
            LateOpen = 1;
            EarlyClose = 2;
            Replace = 3;
            Modify = 4;
        }
    }

    string holidays_id = 1;
    repeated Holiday holidays = 2;
}

message TradingHours {
    message Session {
        WeekDay start_weekdate = 1;
        int64 start_time = 2;
        WeekDay end_weekdate = 3;
        int64 end_time = 4;
        bool eod = 5;

        enum WeekDay {
            Sunday = 0;
            Monday = 1;
            Tuesday = 2;
            Wednesday = 3;
            Thursday = 4;
            Friday = 5;
            Saturday = 6;
        }
    }

    string trading_hours_id = 1;
    string timezone_id = 2;
    repeated Session sessions = 3;
}

message TimeZone {
    string timezone_id = 1;
}